{"version":3,"sources":["config.js","CircleButton/CircleButton.js","ApiContext.js","notes-helpers.js","NoteListNav/NoteListNav.js","NotePageNav/NotePageNav.js","Note/Note.js","NoteListMain/NoteListMain.js","NotePageMain/NotePageMain.js","NotefulError.js","ValidationError.js","AddFolder/AddFolder.js","FolderOptions.js","AddNote/AddNote.js","App/App.js","index.js"],"names":["API_ENDPOINT","API_KEY","process","end","REACT_APP_API_KEY","NavCircleButton","props","tag","className","childrenm","otherProps","React","createElement","join","children","defaultProps","ApiContext","createContext","notes","folders","addFolder","addNote","deleteNote","findNote","noteId","find","note","id","countNotesForFolder","folderId","filter","length","NoteListNav","this","context","map","folder","to","name","Link","type","icon","Component","contextType","NotePageNav","match","params","findFolder","role","onClick","history","goBack","content","error","Note","handleClickDelete","e","preventDefault","fetch","config","method","headers","then","res","ok","json","Promise","reject","catch","console","modified","format","Date","onDeleteNote","NoteListMain","notesForFolder","getNotesForFolder","NotePageMain","handleDeleteNote","push","split","para","i","NotefulError","state","hasError","ValidationError","message","AddFolder","value","touched","setState","event","trim","nameError","validateName","onSubmit","handleSubmit","htmlFor","onChange","updateName","target","required","FolderOptions","updateFolderId","AddNote","handleClickCancel","updateModified","moment","toDate","contentError","validateContent","folderIdError","validateFolderId","updateContent","App","newNotes","folderName","Accept","body","JSON","stringify","resJSON","newFolders","err","log","noteData","all","notesRes","foldersRes","path","exact","component","Provider","renderNavRoutes","renderMainRoutes","library","add","faPlus","faChevronLeft","faTrashAlt","faCheckDouble","ReactDOM","render","document","getElementById"],"mappings":"oGAAA,YAAe,KACXA,aAAa,2CACbC,QAASC,EAAQC,IAAIC,qB,mcCCV,SAASC,EAAgBC,GACeA,EAA7CC,IAA6CD,EAAxCE,UAAwCF,EAA7BG,UADsB,IACRC,EADO,YACQJ,EADR,iCAG7C,OAAOK,IAAMC,cACXN,EAAMC,IADD,aAGHC,UAAW,CAAC,kBAAmBF,EAAME,WAAWK,KAAK,MAClDH,GAELJ,EAAMQ,UAIVT,EAAgBU,aAAc,CAC5BR,IAAK,KCfP,IAQeS,EARIL,IAAMM,cAAc,CACrCC,MAAO,GACPC,QAAS,GACTC,UAAW,aACXC,QAAS,aACTC,WAAY,eCJDC,EAAW,eAACL,EAAD,uDAAO,GAAIM,EAAX,8CACpBN,EAAMO,MAAM,SAAAC,GAAI,OAAIA,EAAKC,KAAOH,MAQnBI,EAAsB,eAACV,EAAD,uDAAO,GAAIW,EAAX,8CAC/BX,EAAMY,QAAO,SAAAJ,GAAI,OAAIA,EAAKG,WAAaA,KAAUE,QCLpCC,G,6KAGT,IAAD,EAC0BC,KAAKC,QAD/B,IACCf,eADD,MACS,GADT,MACaD,aADb,MACmB,GADnB,EAEP,OACE,sBAAKV,UAAU,cAAf,UACE,oBAAIA,UAAU,oBAAd,SACGW,EAAQgB,KAAI,SAAAC,GAAM,OACjB,6BACE,eAAC,IAAD,CACE5B,UAAU,2BACV6B,GAAE,kBAAaD,EAAOT,IAFxB,UAIE,sBAAMnB,UAAU,yBAAhB,SACGoB,EAAoBV,EAAOkB,EAAOT,MAEpCS,EAAOE,SARHF,EAAOT,SAapB,qBAAKnB,UAAU,8BAAf,SACE,eAAC,EAAD,CACED,IAAKgC,IACLF,GAAG,cACHG,KAAK,SACLhC,UAAU,iCAJZ,UAME,cAAC,IAAD,CAAiBiC,KAAK,SACtB,uBAPF,qB,GAvB+B9B,IAAM+B,YAA1BV,EACZW,YAAc3B,E,UCDF4B,E,uKAWT,IAAD,SACqBX,KAAKC,QAAzBhB,EADD,EACCA,MAAOC,EADR,EACQA,QACPK,EAAWS,KAAK3B,MAAMuC,MAAMC,OAA5BtB,OAEFY,EFvBgB,eAAaP,EAAb,qGAAS,IACvBJ,MAAK,SAAAW,GAAM,OAAIA,EAAOT,KAAOE,KEsBtBkB,CAAW5B,GADbI,EAASL,EAAOM,IAAW,IACAK,UACxC,OACE,sBAAKrB,UAAU,cAAf,UACE,eAAC,EAAD,CACED,IAAI,SACJyC,KAAK,OACLC,QAAS,kBAAM,EAAK3C,MAAM4C,QAAQC,UAClC3C,UAAU,2BAJZ,UAME,cAAC,IAAD,CAAiBiC,KAAK,iBACtB,uBAPF,UAUCL,GACC,oBAAI5B,UAAU,2BAAd,SACG4B,EAAOE,c,GA9BqB3B,IAAM+B,WAA1BE,EACZ7B,aAAe,CACpBmC,QAAS,CACPC,OAAQ,cAEVN,MAAO,CACLC,OAAQ,KANOF,EASZD,YAAc3B,EA6BvB4B,EAAY7B,aAAe,CACzBI,QAAS,GACTiC,QAAS,GACTd,KAAM,GACNe,MAAO,M,oBCzCYC,G,kNAMnBC,kBAAoB,SAAAC,GAClBA,EAAEC,iBACF,IAAMjC,EAAS,EAAKlB,MAAMqB,GAE1B+B,MAAM,GAAD,OAAIC,IAAO3D,aAAX,kBAAiCwB,GAAU,CAC9CoC,OAAQ,SACRC,QAAS,CACP,eAAgB,sBAGjBC,MAAK,SAAAC,GACJ,OAAKA,EAAIC,GAEFD,EAAIE,OADFF,EAAIE,OAAOH,MAAK,SAAAN,GAAC,OAAIU,QAAQC,OAAOX,SAG9CM,MAAK,WACJ,EAAK5B,QAAQZ,WAAWE,MAEzB4C,OAAM,SAAAf,GACLgB,QAAQhB,MAAM,CAAEA,c,uDAIZ,IAAD,EACwBpB,KAAK3B,MAA5BgC,EADD,EACCA,KAAMX,EADP,EACOA,GAAI2C,EADX,EACWA,SAClB,OAAKrC,KAAK3B,MAAMqB,GAId,sBAAKnB,UAAU,OAAf,UACE,oBAAIA,UAAU,cAAd,SACE,cAAC,IAAD,CAAM6B,GAAE,gBAAWV,GAAnB,SACGW,MAGL,yBACE9B,UAAU,eACVgC,KAAK,SACLS,QAAShB,KAAKsB,kBAHhB,UAKE,cAAC,IAAD,CAAiBd,KAAK,cACrB,IANH,YASA,qBAAKjC,UAAU,cAAf,SACE,sBAAKA,UAAU,uBAAf,qBAEG,IACD,sBAAMA,UAAU,OAAhB,SACG+D,YAAO,IAAIC,KAAKF,GAAW,yBAvB7B,cAAC,IAAD,CAAUjC,GAAK,U,GAhCM1B,IAAM+B,YAAnBY,EACZvC,aAAc,CACnB0D,aAAc,cAFGnB,EAIZX,YAAc3B,EA4DvBsC,EAAKvC,aAAe,CAClBI,QAAS,GACTiC,QAAS,GACTd,KAAM,GACNe,MAAO,M,UCpEYqB,E,uKAQT,IACA7C,EAAaI,KAAK3B,MAAMuC,MAAMC,OAA9BjB,SADD,EAEcI,KAAKC,QAAlBhB,MACFyD,EJduB,eAACzD,EAAD,uDAAO,GAAIW,EAAX,8CAC3BA,EAEIX,EAAMY,QAAO,SAAAJ,GAAI,OAAIA,EAAKG,WAAaA,KADvCX,EIYiB0D,MAHhB,MAEO,GAFP,EAGyC/C,GAChD,OACE,0BAASrB,UAAU,eAAnB,UACE,6BACGmE,EAAexC,KAAI,SAAAT,GAAI,OACtB,6BACE,cAAC,EAAD,CACEC,GAAID,EAAKC,GACTW,KAAMZ,EAAKY,KACXgC,SAAU5C,EAAK4C,YAJV5C,EAAKC,SASlB,qBAAKnB,UAAU,iCAAf,SACE,eAAC,EAAD,CACED,IAAKgC,IACLF,GAAG,YACHG,KAAK,SACLhC,UAAU,gCAJZ,UAME,cAAC,IAAD,CAAiBiC,KAAK,SACtB,uBAPF,mB,GA1BgC9B,IAAM+B,WAA3BgC,EACZ3D,aAAe,CACpB8B,MAAO,CACLC,OAAQ,KAHO4B,EAMZ/B,YAAc3B,E,UCRF6D,E,4MAQnBC,iBAAmB,SAAAtD,GACjB,EAAKlB,MAAM4C,QAAQ6B,KAAnB,M,uDAGQ,IAAD,EACc9C,KAAKC,QAAlBhB,aADD,MACO,GADP,EAECM,EAAWS,KAAK3B,MAAMuC,MAAMC,OAA5BtB,OACFE,EAAOH,EAASL,EAAOM,IAAW,CAAE4B,QAAS,IACnD,OACE,0BAAS5C,UAAU,eAAnB,UACE,cAAC,EAAD,CACEmB,GAAID,EAAKC,GACTW,KAAMZ,EAAKY,KACXgC,SAAU5C,EAAK4C,SACfG,aAAcxC,KAAK6C,mBAErB,qBAAKtE,UAAU,wBAAf,SACGkB,EAAK0B,QAAQ4B,MAAM,YAAY7C,KAAI,SAAC8C,EAAMC,GAAP,OAClC,4BAAYD,GAAJC,e,GA1BsBvE,IAAM+B,WAA3BmC,EACZ9D,aAAe,CACpB8B,MAAO,CACLC,OAAQ,KAHO+B,EAMZlC,YAAc3B,EA4BvB6D,EAAa9D,aAAe,CAC1BI,QAAS,GACTiC,QAAS,GACTd,KAAM,GACNe,MAAO,M,ICrBM8B,E,kDArBX,WAAY7E,GAAQ,IAAD,8BACf,cAAMA,IACD8E,MAAQ,CACTC,UAAU,GAHC,E,qDAYf,OAAIpD,KAAKmD,MAAMC,SAEP,+DAGDpD,KAAK3B,MAAMQ,Y,gDAVUuC,GAC5B,MAAO,CAACgC,UAAU,O,GATC1E,IAAM+B,WCelB4C,MAdf,SAAyBhF,GACrB,OAAGA,EAAMiF,QAED,qBAAK/E,UAAY,QAAjB,SAA0BF,EAAMiF,UAIjC,8BCHLC,G,wDAEF,WAAYlF,GAAQ,IAAD,8BACf,cAAMA,IACD8E,MAAQ,CACT9C,KAAM,CACFmD,MAAO,GACPC,SAAS,GAEb/D,GAAI,IAPO,E,uDAWRW,GACPL,KAAK0D,SAAS,CAACrD,KAAM,CAACmD,MAAOnD,EAAMoD,SAAS,O,mCAGnCE,GACTA,EAAMnC,iBACNxB,KAAKC,QAAQd,UAAUa,KAAKmD,MAAM9C,KAAKmD,OACvCxD,KAAK3B,MAAM4C,QAAQ6B,KAAK,O,qCAIxB,IAAMzC,EAAOL,KAAKmD,MAAM9C,KAAKmD,MAAMI,OACnC,OAAoB,IAAhBvD,EAAKP,OACE,mBAEFO,EAAKP,OAAS,EACZ,0CADN,I,+BAKC,IAAD,OACC+D,EAAY7D,KAAK8D,eACvB,OACI,mCACA,sBAAMvF,UAAY,YACdwF,SAAY,SAACxC,GAAD,OAAO,EAAKyC,aAAazC,IADzC,SAEQ,eAAC,EAAD,WACI,qDACA,uBAAO0C,QAAU,kBAAjB,0BACA,uBACI1D,KAAO,OACPhC,UAAY,mBACZ8B,KAAO,OACPX,GAAK,OACLwE,SAAY,SAAA3C,GAAC,OAAI,EAAK4C,WAAW5C,EAAE6C,OAAOZ,QAC1Ca,UAAQ,IACXrE,KAAKmD,MAAM9C,KAAKoD,SACb,cAAC,EAAD,CAAiBH,QAAWO,IAEhC,wBACItD,KAAO,SACPhC,UAAY,oBAFhB,6B,GApDAkC,cAAlB8C,EACK7C,YAAc3B,EAgEzBwE,EAAUzE,aAAe,CACrBI,QAAS,GACTiC,QAAS,GACTd,KAAM,GACNe,MAAO,MAWImC,QCnFTe,G,mLAGQ,IAAD,SACkBtE,KAAKC,QAArBf,eADF,MACY,GADZ,EAEL,OACI,yBACIX,UAAY,iBACZ2F,SAAY,SAAA3C,GAAC,OAAI,EAAKlD,MAAMkG,eAAehD,EAAE6C,OAAOZ,QACpDa,UAAQ,EAHZ,UAIQ,wBAAQb,MAAQ,GAAhB,6BACCtE,EAAQgB,KAAI,SAAAC,GAAM,OACf,wBAEIqD,MAASrD,EAAOT,GAChBnB,UAAY,eAHhB,SAIS4B,EAAOE,MAHLF,EAAOT,c,GAbdhB,IAAM+B,YAA5B6D,EACK5D,YAAc3B,EAuBVuF,Q,iBCnBTE,E,kDAEF,WAAYnG,GAAQ,IAAD,8BACf,cAAMA,IAgCVkG,eAAiB,SAACpE,GACd,EAAKuD,SAAS,CAAC9D,SAAU,CAAC4D,MAAOrD,EAAQsD,SAAS,MAlCnC,EA6EnBgB,kBAAoB,WAChB,EAAKpG,MAAM4C,QAAQ6B,KAAK,MA5ExB,EAAKK,MAAQ,CACT9C,KAAM,CACFmD,MAAO,IACPC,SAAS,GAEbpB,SAAU,IACVlB,QAAS,CACLqC,MAAO,IACPC,SAAS,GAEb7D,SAAU,CACN4D,MAAO,IACPC,SAAS,IAdF,E,uDAmBRpD,EAAMgC,GACbrC,KAAK0D,SAAS,CAACrD,KAAM,CAACmD,MAAOnD,EAAMoD,SAAS,KAC5CzD,KAAK0E,eAAerC,K,qCAGTA,GACXrC,KAAK0D,SAAS,CAACrB,SAAUA,M,oCAGflB,EAASkB,GACnBrC,KAAK0D,SAAS,CAACvC,QAAS,CAACqC,MAAOrC,EAASsC,SAAS,KAClDzD,KAAK0E,eAAerC,K,mCAOXsB,GACTA,EAAMnC,iBACN,IAAM/B,EAAO,CACTY,KAAML,KAAKmD,MAAM9C,KAAKmD,MACtBnB,SAAUrC,KAAKmD,MAAMd,SACrBlB,QAASnB,KAAKmD,MAAMhC,QAAQqC,MAC5B5D,SAAUI,KAAKmD,MAAMvD,SAAS4D,OAE9BxD,KAAKC,QAAQb,QAAQK,GACrBO,KAAK3B,MAAM4C,QAAQ6B,KAAK,O,kCAI5B6B,MAASC,W,qCAIT,IAAMvE,EAAOL,KAAKmD,MAAM9C,KAAKmD,MAAMI,OACnC,OAAoB,IAAhBvD,EAAKP,OACE,mBAEFO,EAAKP,OAAS,EACZ,8CADN,I,wCAOL,GAAuB,IADPE,KAAKmD,MAAMhC,QAAQqC,MAAMI,OAC7B9D,OACR,MAAO,0C,yCAMX,GAAqB,OADAE,KAAKmD,MAAMvD,SAAS4D,MAErC,MAAO,iC,+BAQL,IAAD,OACCK,EAAY7D,KAAK8D,eACjBe,EAAe7E,KAAK8E,kBACpBC,EAAgB/E,KAAKgF,mBACrB3C,EAAWsC,MAASC,SAE1B,OACI,mCACA,sBAAMrG,UAAY,UAAUwF,SAAY,SAAAxC,GAAC,OAAI,EAAKyC,aAAazC,IAA/D,SACI,eAAC,EAAD,WACA,gDACA,qBAAKhD,UAAY,iBAAjB,mCACA,gCACI,uBAAO0F,QAAU,YAAjB,oBACA,uBACI1D,KAAO,OACPhC,UAAY,gBACZ8B,KAAO,OACPX,GAAK,OACLwE,SAAY,SAAA3C,GAAC,OAAI,EAAK4C,WAAW5C,EAAE6C,OAAOZ,MAAOnB,IACjDgC,UAAQ,IACPrE,KAAKmD,MAAM9C,KAAKoD,SACb,cAAC,EAAD,CAAiBH,QAAWO,OAGxC,gCACI,uBAAOI,QAAU,eAAjB,uBACA,uBACI1D,KAAO,OACPhC,UAAY,mBACZ8B,KAAO,UACPX,GAAK,cACLwE,SAAY,SAAA3C,GAAC,OAAI,EAAK0D,cAAc1D,EAAE6C,OAAOZ,MAAOnB,IACpDgC,UAAQ,IACPrE,KAAKmD,MAAM9C,KAAKoD,SACb,cAAC,EAAD,CAAiBH,QAAWuB,OAGxC,gCACI,uBAAOZ,QAAU,cAAjB,+BACA,cAAC,EAAD,CACIM,eAAkBvE,KAAKuE,iBACtBvE,KAAKmD,MAAMvD,SAAS6D,SACjB,cAAC,EAAD,CAAiBsB,cAAiBA,OAG9C,wBAAQxE,KAAO,SAAShC,UAAY,kBAApC,6B,GAjIMkC,aAAhB+D,EACK9D,YAAc3B,EA0IzByF,EAAQ1F,aAAe,CACnBI,QAAS,GACTiC,QAAS,GACTd,KAAM,GACNe,MAAO,MAWIoD,QCrJTU,G,kNACF/B,MAAQ,CACJlE,MAAO,GACPC,QAAS,I,EAwBb2D,iBAAmB,SAAAtD,GACf,IAAM4F,EAAW,EAAKhC,MAAMlE,MAAMY,QAAO,SAAAJ,GACrC,OAAOA,EAAKC,KAAOH,KAGvB,EAAKmE,SAAS,CACVzE,MAAOkG,K,EAIfhG,UAAY,SAAAiG,GACd3D,MAAM,GAAD,OAAIC,IAAO3D,aAAX,YAAmC,CACvC4D,OAAQ,OACRC,QAAS,CACRyD,OAAQ,mBACR,eAAgB,oBAEjBC,KAAMC,KAAKC,UAAU,CAAEnF,KAAM+E,MAE5BvD,MAAK,SAAAC,GAAG,OAAIA,EAAIE,UAChBH,MAAK,SAAA4D,GACL,IAAMC,EAAU,sBAAO,EAAKvC,MAAMjE,SAAlB,CAA2BuG,IAC3C,EAAK/B,SAAS,CAAExE,QAASwG,IAEzB,EAAKrH,MAAM4C,QAAQ6B,KAAK,QAExBX,OAAM,SAAAwD,GACNvD,QAAQwD,IAAID,O,EAIZvG,QAAU,SAAAyG,GACNpE,MAAM,GAAD,OAAIC,IAAO3D,aAAX,UAAiC,CAClC4D,OAAQ,OACRC,QAAS,CACLyD,OAAQ,mBACR,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUK,KAEpBhE,MAAK,SAAAC,GAAG,OAAIA,EAAIE,UAChBH,MAAK,SAAA4D,GACF,IAAMN,EAAQ,sBAAO,EAAKhC,MAAMlE,OAAlB,CAAyBwG,IACvC,EAAK/B,SAAS,CAACzE,MAAOkG,IAEtB,EAAK9G,MAAM4C,QAAQ6B,KAAK,QAE3BX,OAAM,SAAAwD,GACHvD,QAAQwD,IAAID,O,kEArEH,IAAD,OAChB1D,QAAQ6D,IAAI,CACRrE,MAAM,GAAD,OAAIC,IAAO3D,aAAX,WACL0D,MAAM,GAAD,OAAIC,IAAO3D,aAAX,eAEJ8D,MAAK,YAA6B,IAAD,mBAA1BkE,EAA0B,KAAhBC,EAAgB,KAC9B,OAAKD,EAAShE,GAETiE,EAAWjE,GAGTE,QAAQ6D,IAAI,CAACC,EAAS/D,OAAQgE,EAAWhE,SAFrCgE,EAAWhE,OAAOH,MAAK,SAAAN,GAAC,OAAIU,QAAQC,OAAOX,MAF3CwE,EAAS/D,OAAOH,MAAK,SAAAN,GAAC,OAAIU,QAAQC,OAAOX,SAMvDM,MAAK,YAAuB,IAAD,mBAApB5C,EAAoB,KAAbC,EAAa,KACxB,EAAKwE,SAAS,CAACzE,QAAOC,eAEzBiD,OAAM,SAAAf,GACHgB,QAAQhB,MAAM,CAACA,e,wCAyDvB,OACI,qCACK,CAAC,IAAK,qBAAqBlB,KAAI,SAAA+F,GAAI,OAChC,cAAC,IAAD,CACIC,OAAK,EAELD,KAAMA,EACNE,UAAWpG,GAFNkG,MAKb,cAAC,IAAD,CAAOA,KAAK,gBAAgBE,UAAWxF,IACvC,cAAC,IAAD,CAAOsF,KAAK,cAAcE,UAAW5C,IACrC,cAAC,IAAD,CAAO0C,KAAK,YAAYE,UAAW3B,S,yCAM3C,OACI,qCACK,CAAC,IAAK,qBAAqBtE,KAAI,SAAA+F,GAAI,OAChC,cAAC,IAAD,CACIC,OAAK,EAELD,KAAMA,EACNE,UAAW1D,GAFNwD,MAKb,cAAC,IAAD,CAAOA,KAAK,gBAAgBE,UAAWvD,S,+BAM/C,IAAMY,EAAQ,CACVvE,MAAOe,KAAKmD,MAAMlE,MAClBC,QAASc,KAAKmD,MAAMjE,QACpBG,WAAYW,KAAK6C,iBACjB1D,UAAWa,KAAKb,UAChBC,QAASY,KAAKZ,SAElB,OACI,cAAC,EAAWgH,SAAZ,CAAqB5C,MAAOA,EAA5B,SACI,sBAAKjF,UAAU,MAAf,UACI,qBAAKA,UAAU,WAAf,SAA2ByB,KAAKqG,oBAChC,wBAAQ9H,UAAU,cAAlB,SACI,+BACI,cAAC,IAAD,CAAM6B,GAAG,IAAT,qBAA4B,IAC5B,cAAC,IAAD,CAAiBI,KAAK,sBAG9B,sBAAMjC,UAAU,YAAhB,SAA6ByB,KAAKsG,8B,GAnIpC7F,cA0IlByE,EAAIpG,aAAe,CACfI,QAAS,GACTiC,QAAS,GACTd,KAAM,GACNe,MAAO,MAWI8D,QC5JfqB,IAAQC,IAAIC,IAAQC,IAAeC,IAAYC,KAE/CC,IAASC,OACP,cAAC,IAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.f0c0545e.chunk.js","sourcesContent":["export default {\r\n    API_ENDPOINT: `https://rocky-ocean-37641.herokuapp.com/`,\r\n    API_KEY: process.end.REACT_APP_API_KEY,\r\n  }","import React from 'react'\r\nimport './CircleButton.css'\r\n\r\nexport default function NavCircleButton(props) {\r\n  const { tag, className, childrenm, ...otherProps } = props\r\n\r\n  return React.createElement(\r\n    props.tag,\r\n    {\r\n      className: ['NavCircleButton', props.className].join(' '),\r\n      ...otherProps\r\n    },\r\n    props.children\r\n  )\r\n}\r\n\r\nNavCircleButton.defaultProps ={\r\n  tag: 'a',\r\n}","import React from 'react'\r\n\r\nconst ApiContext = React.createContext({\r\n  notes: [],\r\n  folders: [],\r\n  addFolder: () => {},\r\n  addNote: () => {},\r\n  deleteNote: () => {},\r\n})\r\n\r\nexport default ApiContext;","export const findFolder = (folders=[], folderId) =>\r\n    folders.find(folder => folder.id === folderId)\r\n\r\nexport const findNote = (notes=[], noteId) =>\r\n    notes.find( note => note.id === noteId)\r\n    \r\nexport const getNotesForFolder = (notes=[], folderId) => (\r\n    (!folderId)\r\n        ? notes\r\n        : notes.filter(note => note.folderId === folderId)\r\n)\r\n\r\n    export const countNotesForFolder = (notes=[], folderId) =>\r\n        notes.filter(note => note.folderId === folderId).length","import React from 'react'\r\nimport { NavLink, Link } from 'react-router-dom'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport CircleButton from '../CircleButton/CircleButton'\r\nimport ApiContext from '../ApiContext'\r\nimport { countNotesForFolder } from '../notes-helpers'\r\nimport './NoteListNav.css'\r\n\r\nexport default class NoteListNav extends React.Component {\r\n  static contextType = ApiContext;\r\n\r\n  render() {\r\n    const { folders=[], notes=[] } = this.context\r\n    return (\r\n      <div className='NoteListNav'>\r\n        <ul className='NoteListNav__list'>\r\n          {folders.map(folder =>\r\n            <li key={folder.id}>\r\n              <NavLink\r\n                className='NoteListNav__folder-link'\r\n                to={`/folder/${folder.id}`}\r\n              >\r\n                <span className='NoteListNav__num-notes'>\r\n                  {countNotesForFolder(notes, folder.id)}\r\n                </span>\r\n                {folder.name}\r\n              </NavLink>\r\n            </li>\r\n          )}\r\n        </ul>\r\n        <div className='NoteListNav__button-wrapper'>\r\n          <CircleButton\r\n            tag={Link}\r\n            to='/add-folder'\r\n            type='button'\r\n            className='NoteListNav__add-folder-button'\r\n          >\r\n            <FontAwesomeIcon icon='plus' />\r\n            <br />\r\n            Folder\r\n          </CircleButton>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport CircleButton from '../CircleButton/CircleButton'\r\nimport ApiContext from '../ApiContext'\r\nimport { findNote, findFolder } from '../notes-helpers'\r\nimport PropTypes from 'prop-types';\r\nimport './NotePageNav.css'\r\n\r\nexport default class NotePageNav extends React.Component {\r\n  static defaultProps = {\r\n    history: {\r\n      goBack: () => { }\r\n    },\r\n    match: {\r\n      params: {}\r\n    }\r\n  }\r\n  static contextType = ApiContext;\r\n\r\n  render() {\r\n    const { notes, folders, } = this.context\r\n    const { noteId } = this.props.match.params\r\n    const note = findNote(notes, noteId) || {}\r\n    const folder = findFolder(folders, note.folderId)\r\n    return (\r\n      <div className='NotePageNav'>\r\n        <CircleButton\r\n          tag='button'\r\n          role='link'\r\n          onClick={() => this.props.history.goBack()}\r\n          className='NotePageNav__back-button'\r\n        >\r\n          <FontAwesomeIcon icon='chevron-left' />\r\n          <br />\r\n          Back\r\n        </CircleButton>\r\n        {folder && (\r\n          <h3 className='NotePageNav__folder-name'>\r\n            {folder.name}\r\n          </h3>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nNotePageNav.defaultProps = {\r\n  folders: [],\r\n  content: \"\",\r\n  name: \"\",\r\n  error: null\r\n}\r\n\r\nNotePageNav.propTypes = {\r\n  folders: PropTypes.array,\r\n  name: PropTypes.string.isRequired,\r\n  id: PropTypes.string,\r\n  content: PropTypes.string.isRequired,\r\n  modified: PropTypes.string\r\n}","import React from 'react'\r\nimport { Redirect, Link } from 'react-router-dom'\r\nimport { format } from 'date-fns'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport ApiContext from '../ApiContext'\r\nimport config from '../config'\r\nimport './Note.css'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Note extends React.Component {\r\n  static defaultProps ={\r\n    onDeleteNote: () => {},\r\n  }\r\n  static contextType = ApiContext;\r\n\r\n  handleClickDelete = e => {\r\n    e.preventDefault()\r\n    const noteId = this.props.id\r\n\r\n    fetch(`${config.API_ENDPOINT}/notes/${noteId}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'content-type': 'application/json'\r\n      },\r\n    })\r\n      .then(res => {\r\n        if (!res.ok)\r\n          return res.json().then(e => Promise.reject(e))\r\n        return res.json()\r\n      })\r\n      .then(() => {\r\n        this.context.deleteNote(noteId)\r\n      })\r\n      .catch(error => {\r\n        console.error({ error })\r\n      })\r\n  }\r\n\r\n  render() {\r\n    const { name, id, modified } = this.props\r\n    if (!this.props.id) {\r\n      return <Redirect to = '/' />\r\n    }\r\n    return (\r\n      <div className='Note'>\r\n        <h2 className='Note__title'>\r\n          <Link to={`/note/${id}`}>\r\n            {name}\r\n          </Link>\r\n        </h2>\r\n        <button\r\n          className='Note__delete'\r\n          type='button'\r\n          onClick={this.handleClickDelete}\r\n        >\r\n          <FontAwesomeIcon icon='trash-alt' />\r\n          {' '}\r\n          remove\r\n        </button>\r\n        <div className='Note__dates'>\r\n          <div className='Note__dates-modified'>\r\n            Modified\r\n            {' '}\r\n            <span className='Date'>\r\n              {format(new Date(modified), 'MMM dd,yyyy')}\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nNote.defaultProps = {\r\n  folders: [],\r\n  content: \"\",\r\n  name: \"\",\r\n  error: null\r\n}\r\n\r\nNote.propTypes = {\r\n  folders: PropTypes.array,\r\n  name: PropTypes.string.isRequired,\r\n  id: PropTypes.string,\r\n  content: PropTypes.string.isRequired,\r\n  modified: PropTypes.string\r\n}","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport Note from '../Note/Note'\r\nimport CircleButton from '../CircleButton/CircleButton'\r\nimport ApiContext from '../ApiContext'\r\nimport { getNotesForFolder } from '../notes-helpers'\r\nimport './NoteListMain.css'\r\n\r\nexport default class NoteListMain extends React.Component {\r\n  static defaultProps = {\r\n    match: {\r\n      params: {}\r\n    }\r\n  }\r\n  static contextType = ApiContext\r\n\r\n  render() {\r\n    const { folderId } = this.props.match.params\r\n    const { notes=[] } = this.context\r\n    const notesForFolder = getNotesForFolder(notes, folderId)\r\n    return (\r\n      <section className='NoteListMain'>\r\n        <ul>\r\n          {notesForFolder.map(note =>\r\n            <li key={note.id}>\r\n              <Note\r\n                id={note.id}\r\n                name={note.name}\r\n                modified={note.modified}\r\n              />\r\n            </li>\r\n          )}\r\n        </ul>\r\n        <div className='NoteListMain__button-container'>\r\n          <CircleButton\r\n            tag={Link}\r\n            to='/add-note'\r\n            type='button'\r\n            className='NoteListMain__add-note-button'\r\n          >\r\n            <FontAwesomeIcon icon='plus' />\r\n            <br />\r\n            Note\r\n          </CircleButton>\r\n        </div>\r\n      </section>\r\n    )\r\n  }\r\n}","import React from 'react'\r\nimport Note from '../Note/Note'\r\nimport ApiContext from '../ApiContext'\r\nimport { findNote } from '../notes-helpers'\r\nimport PropTypes from 'prop-types'\r\nimport './NotePageMain.css'\r\n\r\nexport default class NotePageMain extends React.Component {\r\n  static defaultProps = {\r\n    match: {\r\n      params: {}\r\n    }\r\n  }\r\n  static contextType = ApiContext\r\n\r\n  handleDeleteNote = noteId => {\r\n    this.props.history.push(`/`)\r\n  }\r\n\r\n  render() {\r\n    const { notes=[] } = this.context\r\n    const { noteId } = this.props.match.params\r\n    const note = findNote(notes, noteId) || { content: '' }\r\n    return (\r\n      <section className='NotePageMain'>\r\n        <Note\r\n          id={note.id}\r\n          name={note.name}\r\n          modified={note.modified}\r\n          onDeleteNote={this.handleDeleteNote}\r\n        />\r\n        <div className='NotePageMain__content'>\r\n          {note.content.split(/\\n \\r|\\n/).map((para, i) =>\r\n            <p key={i}>{para}</p>\r\n          )}\r\n        </div>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nNotePageMain.defaultProps = {\r\n  folders: [],\r\n  content: \"\",\r\n  name: \"\",\r\n  error: null\r\n}\r\n\r\nNotePageMain.propTypes = {\r\n  folders: PropTypes.array,\r\n  name: PropTypes.string.isRequired,\r\n  id: PropTypes.string,\r\n  content: PropTypes.string.isRequired,\r\n  modified: PropTypes.string\r\n}","import React from 'react';\r\n\r\nclass NotefulError extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        };\r\n    }\r\n\r\n    static getDerivedStateFromError(error) {\r\n        return {hasError: true};\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return (\r\n                <h2>Sorry, we could not add this.</h2>\r\n            );\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default NotefulError;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction ValidationError(props) {\r\n    if(props.message) {\r\n        return (\r\n            <div className = 'error'>{props.message}</div>\r\n        );\r\n    }\r\n\r\n    return <></>\r\n}\r\n\r\nValidationError.propTypes = {\r\n    message: PropTypes.string\r\n};\r\n\r\nexport default ValidationError;","import React, {Component} from 'react';\r\nimport NotefulError from '../NotefulError';\r\nimport ValidationError from '../ValidationError';\r\nimport PropTypes from 'prop-types';\r\nimport './AddFolder.css';\r\nimport ApiContext from '../ApiContext';\r\n\r\nclass AddFolder extends Component {\r\n    static contextType = ApiContext;\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: {\r\n                value: \"\",\r\n                touched: false\r\n            },\r\n            id: \"\",\r\n        };\r\n    }\r\n\r\n    updateName(name) {\r\n        this.setState({name: {value: name, touched: true}});\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        this.context.addFolder(this.state.name.value);\r\n        this.props.history.push('/');\r\n    }\r\n\r\n    validateName() {\r\n        const name = this.state.name.value.trim();\r\n        if (name.length === 0) {\r\n            return 'Name is required';\r\n        }\r\n        else if (name.length < 3) {\r\n            return 'Name must be at least 3 characters';\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const nameError = this.validateName();\r\n        return (\r\n            <>\r\n            <form className = 'newFolder'\r\n                onSubmit = {(e) => this.handleSubmit(e)}>\r\n                    <NotefulError>\r\n                        <h2>Create a new folder</h2>\r\n                        <label htmlFor = 'newFolder__name'>Folder Name:</label>\r\n                        <input\r\n                            type = 'text'\r\n                            className = 'newFolder__input'\r\n                            name = 'name'\r\n                            id = 'name'\r\n                            onChange = {e => this.updateName(e.target.value)}\r\n                            required />\r\n                        {this.state.name.touched && (\r\n                            <ValidationError message = {nameError} />\r\n                        )}\r\n                        <button\r\n                            type = 'submit'\r\n                            className = 'newFolder__submit'\r\n                        >\r\n                            Save\r\n                        </button>\r\n                    </NotefulError>\r\n                </form>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nAddFolder.defaultProps = {\r\n    folders: [],\r\n    content: \"\",\r\n    name: \"\",\r\n    error: null\r\n}\r\n\r\nAddFolder.propTypes = {\r\n    folders: PropTypes.array,\r\n    name: PropTypes.string.isRequired,\r\n    id: PropTypes.string,\r\n    content: PropTypes.string,\r\n    modified: PropTypes.string,\r\n}\r\n\r\nexport default AddFolder;","import React from 'react';\r\nimport ApiContext from './ApiContext';\r\nimport './FolderOptions.css';\r\n\r\nclass FolderOptions extends React.Component {\r\n    static contextType = ApiContext;\r\n\r\n    render() {\r\n        const {folders = []} = this.context;\r\n        return (\r\n            <select\r\n                className = 'folderDropdown'\r\n                onChange = {e => this.props.updateFolderId(e.target.value)}\r\n                required>\r\n                    <option value = \"\" >Select a Folder</option>\r\n                    {folders.map(folder =>\r\n                        <option\r\n                            key = {folder.id}\r\n                            value = {folder.id}\r\n                            className = 'folderOption'>\r\n                                {folder.name}\r\n                        </option>\r\n                        )}\r\n                </select>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FolderOptions;","import React, {Component} from 'react';\r\nimport NotefulError from '../NotefulError';\r\nimport ValidationError from '../ValidationError';\r\nimport ApiContext from '../ApiContext';\r\nimport './AddNote.css';\r\nimport FolderOptions from '../FolderOptions';\r\nimport moment from 'moment';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass AddNote extends Component {\r\n    static contextType = ApiContext;\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: {\r\n                value: \" \",\r\n                touched: false\r\n            },\r\n            modified: \" \",\r\n            content: {\r\n                value: \" \",\r\n                touched: false\r\n            },\r\n            folderId: {\r\n                value: \" \",\r\n                touched: false\r\n            }\r\n        };\r\n    }\r\n\r\n    updateName(name, modified) {\r\n        this.setState({name: {value: name, touched: true}});\r\n        this.updateModified(modified);\r\n    }\r\n\r\n    updateModified(modified) {\r\n        this.setState({modified: modified});\r\n    }\r\n\r\n    updateContent(content, modified) {\r\n        this.setState({content: {value: content, touched: true}});\r\n        this.updateModified(modified);\r\n    }\r\n\r\n    updateFolderId = (folder) => {\r\n        this.setState({folderId: {value: folder, touched: true}});\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        const note = {\r\n            name: this.state.name.value,\r\n            modified: this.state.modified,\r\n            content: this.state.content.value,\r\n            folderId: this.state.folderId.value\r\n        }\r\n            this.context.addNote(note)\r\n            this.props.history.push('/')\r\n    }\r\n\r\n    timeStamp() {\r\n        moment().toDate()\r\n    }\r\n\r\n    validateName() {\r\n        const name = this.state.name.value.trim();\r\n        if (name.length === 0) {\r\n            return 'Name is required';\r\n        }\r\n        else if (name.length < 3) {\r\n            return 'Name must be at least three characters'\r\n        }\r\n    }\r\n\r\n    validateContent() {\r\n        const content = this.state.content.value.trim();\r\n        if (content.length === 0) {\r\n            return 'Content is required for note creation'\r\n        }\r\n    }\r\n\r\n    validateFolderId() {\r\n        const folderOption = this.state.folderId.value;\r\n        if (folderOption === null) {\r\n            return 'Picking a folder is required'\r\n        }\r\n    }\r\n\r\n    handleClickCancel = () => {\r\n        this.props.history.push('/')\r\n    };\r\n\r\n    render() {\r\n        const nameError = this.validateName();\r\n        const contentError = this.validateContent();\r\n        const folderIdError = this.validateFolderId();\r\n        const modified = moment().toDate();\r\n\r\n        return (\r\n            <>\r\n            <form className = 'addNote' onSubmit = {e => this.handleSubmit(e)}>\r\n                <NotefulError>\r\n                <h2>Add a new note</h2>\r\n                <div className = 'addNote__input'>* fields are required</div>\r\n                <div>\r\n                    <label htmlFor = 'nameInput'>Name: </label>\r\n                    <input \r\n                        type = 'text' \r\n                        className = 'addNote__name'\r\n                        name = 'name' \r\n                        id = 'name'\r\n                        onChange = {e => this.updateName(e.target.value, modified)}\r\n                        required />\r\n                        {this.state.name.touched && (\r\n                            <ValidationError message = {nameError} />\r\n                        )}\r\n                </div>\r\n                <div>\r\n                    <label htmlFor = 'contentInput'>Content: </label>\r\n                    <input \r\n                        type = 'text' \r\n                        className = 'addNote__content'\r\n                        name = 'content' \r\n                        id = 'noteContent'\r\n                        onChange = {e => this.updateContent(e.target.value, modified)}\r\n                        required />\r\n                        {this.state.name.touched && (\r\n                            <ValidationError message = {contentError}/>\r\n                        )}\r\n                </div>\r\n                <div>\r\n                    <label htmlFor = 'folderInput'>Choose a Folder: </label>\r\n                    <FolderOptions\r\n                        updateFolderId = {this.updateFolderId}/>\r\n                        {this.state.folderId.touched && (\r\n                            <ValidationError folderIdError = {folderIdError}/>\r\n                        )}\r\n                </div>\r\n                <button type = 'submit' className = 'addNote__button'>\r\n                    Save\r\n                </button>\r\n                </NotefulError>\r\n            </form>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nAddNote.defaultProps = {\r\n    folders: [],\r\n    content: \"\",\r\n    name: \"\",\r\n    error: null\r\n}\r\n\r\nAddNote.propTypes = {\r\n    folders: PropTypes.array,\r\n    name: PropTypes.string.isRequired,\r\n    id: PropTypes.string,\r\n    content: PropTypes.string.isRequired,\r\n    modified: PropTypes.string\r\n}\r\n\r\nexport default AddNote;","import React, {Component} from 'react';\r\nimport {Route, Link} from 'react-router-dom';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport NoteListNav from '../NoteListNav/NoteListNav';\r\nimport NotePageNav from '../NotePageNav/NotePageNav';\r\nimport NoteListMain from '../NoteListMain/NoteListMain';\r\nimport NotePageMain from '../NotePageMain/NotePageMain';\r\nimport ApiContext from '../ApiContext';\r\nimport config from '../config';\r\nimport AddFolder from '../AddFolder/AddFolder';\r\nimport AddNote from '../AddNote/AddNote';\r\nimport PropTypes from 'prop-types';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n    state = {\r\n        notes: [],\r\n        folders: []\r\n    };\r\n\r\n    componentDidMount() {\r\n        Promise.all([\r\n            fetch(`${config.API_ENDPOINT}/notes`),\r\n            fetch(`${config.API_ENDPOINT}/folders`)\r\n        ])\r\n            .then(([notesRes, foldersRes]) => {\r\n                if (!notesRes.ok)\r\n                    return notesRes.json().then(e => Promise.reject(e));\r\n                if (!foldersRes.ok)\r\n                    return foldersRes.json().then(e => Promise.reject(e));\r\n\r\n                return Promise.all([notesRes.json(), foldersRes.json()]);\r\n            })\r\n            .then(([notes, folders]) => {\r\n                this.setState({notes, folders});\r\n            })\r\n            .catch(error => {\r\n                console.error({error});\r\n            });\r\n    }\r\n\r\n    handleDeleteNote = noteId => {\r\n        const newNotes = this.state.notes.filter(note => {\r\n            return note.id !== noteId;\r\n        });\r\n\r\n        this.setState({\r\n            notes: newNotes\r\n        })\r\n    };\r\n\r\n    addFolder = folderName => {\r\n\t\tfetch(`${config.API_ENDPOINT}/folders`, {\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: {\r\n\t\t\t\tAccept: 'application/json',\r\n\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify({ name: folderName })\r\n\t\t})\r\n\t\t\t.then(res => res.json())\r\n\t\t\t.then(resJSON => {\r\n\t\t\t\tconst newFolders = [...this.state.folders, resJSON]\r\n\t\t\t\tthis.setState({ folders: newFolders })\r\n\r\n\t\t\t\tthis.props.history.push('/')\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\tconsole.log(err)\r\n\t\t\t})\r\n    }\r\n    \r\n    addNote = noteData => {\r\n        fetch(`${config.API_ENDPOINT}/notes`, {\r\n            method: 'POST',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(noteData)\r\n        })\r\n            .then(res => res.json())\r\n            .then(resJSON => {\r\n                const newNotes = [...this.state.notes, resJSON]\r\n                this.setState({notes: newNotes})\r\n\r\n                this.props.history.push('/')\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    renderNavRoutes() {\r\n        return (\r\n            <>\r\n                {['/', '/folder/:folderId'].map(path => (\r\n                    <Route\r\n                        exact\r\n                        key={path}\r\n                        path={path}\r\n                        component={NoteListNav}\r\n                    />\r\n                ))}\r\n                <Route path=\"/note/:noteId\" component={NotePageNav} />\r\n                <Route path=\"/add-folder\" component={AddFolder} />\r\n                <Route path=\"/add-note\" component={AddNote} />\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderMainRoutes() {\r\n        return (\r\n            <>\r\n                {['/', '/folder/:folderId'].map(path => (\r\n                    <Route\r\n                        exact\r\n                        key={path}\r\n                        path={path}\r\n                        component={NoteListMain}\r\n                    />\r\n                ))}\r\n                <Route path=\"/note/:noteId\" component={NotePageMain} />\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const value = {\r\n            notes: this.state.notes,\r\n            folders: this.state.folders,\r\n            deleteNote: this.handleDeleteNote,\r\n            addFolder: this.addFolder,\r\n            addNote: this.addNote\r\n        };\r\n        return (\r\n            <ApiContext.Provider value={value}>\r\n                <div className=\"App\">\r\n                    <nav className=\"App__nav\">{this.renderNavRoutes()}</nav>\r\n                    <header className=\"App__header\">\r\n                        <h1>\r\n                            <Link to=\"/\">Noteful</Link>{' '}\r\n                            <FontAwesomeIcon icon=\"check-double\" />\r\n                        </h1>\r\n                    </header>\r\n                    <main className=\"App__main\">{this.renderMainRoutes()}</main>\r\n                </div>\r\n            </ApiContext.Provider>\r\n        );\r\n    }\r\n}\r\n\r\nApp.defaultProps = {\r\n    folders: [],\r\n    content: \"\",\r\n    name: \"\",\r\n    error: null\r\n  }\r\n  \r\nApp.propTypes = {\r\nfolders: PropTypes.array,\r\nname: PropTypes.string.isRequired,\r\nid: PropTypes.string,\r\ncontent: PropTypes.string.isRequired,\r\nmodified: PropTypes.string\r\n}\r\n\r\nexport default App;","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport {\r\n  faPlus, faChevronLeft, faTrashAlt, faCheckDouble\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport 'typeface-roboto'\r\nimport './index.css'\r\nimport App from './App/App'\r\n\r\nlibrary.add(faPlus, faChevronLeft, faTrashAlt, faCheckDouble)\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n)"],"sourceRoot":""}